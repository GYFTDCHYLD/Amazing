package WheelOfFortune;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Random;
import java.util.Scanner;

public class GameManager {
	private String categoryFromFile, puzzleFromFile, selectedCategory, selectedPuzzle, cardTypeFromFile;
	private float cardValuesFromFile, selectedValue;
	private LinkedList Wheel = new LinkedList();
	private LinkedList ContestantList = new LinkedList();
	private Queue gussedQueue = new Queue();
	private LinkedList PuzzleList = new LinkedList();
	private Scanner input = new Scanner(System.in);
	private Random rand = new Random();
	private int spotOnWheel = 0;/** points to the current spot on the wheel it changes every time the wheel **/
	private int roundNumber = 0;
	private int NumberOfPuzzle = 0;
	private String option = "", Name = "";
	private char wordToSolve[]; /** get the puzzle and store it as a char array **/
	private SoundEffects effects = new SoundEffects();
	private Node Player = new Node(); /* creates a new node to store (the selected player Data) */
	private Node RoundPuzzle = new Node();;	/* creates a new node to store (the selected puzzle data) */
	private int LeterRemainInPuzzle;
	private Card Spin = new Card();/** Create an instance of card to store the data that was selected at random from the wheel  **/
	private boolean puzzleSolved = false;
	private boolean StopTheWheel = false;
	private String attempt = " ";
	private String userInput = "";
	private boolean VowelBought = false; 
	private boolean incorrectGuess = false;
	private int totalPlayers = 3;
	private int bots = 0; /* set the amount of bot to zero, player can choose the amount of bot(s) to play with */
	private String botAlphabet = "qwertyuiopasdfghjklzxcvbnm".toUpperCase(), tempBotAlphabet;
	
	
	public void Setup() {
        try {
        	LoadWheel();/** Card/Wheel function  **/
    		LoadPuzzle();/** Puzzle function  **/
    		
        }catch (FileNotFoundException e) {
    		System.err.println(" ( FileNotFoundException ) File Not Found!!");
    	}
	}
	
	
	
/*************************************************  ROUND STARTS HERE  ****************************************************************/	
	public void round() throws IOException, IllegalArgumentException, InterruptedException{
		try {
			roundNumber +=1;
			Player = ContestantList.SelectNextNode();/** select the player to start with **/
			tempBotAlphabet = botAlphabet;/*a temp is used because each letter the bot guesses is removed from the string and is need to be refreshed with the original on each round*/
			PuzzleSelectedAtRandom(); /* Call the function that selects the puzzle   */
			puzzleToSolve();/* Display puzzle to be solved function */
			
			puzzleSolved = false;
			while(!puzzleSolved) {/* *********************** PUZZLE LOOP STARTS *********************** */
				
				if(isBot(Player.getPlayerData().getName())) {
					BotGuessBuffer = 0; /* the rage of letter the bot chooses from; starts from BotGuessBuffer to the random number generated by the function below */
		    		AI_BotGuess(IQScale+rand.nextInt(Difficulty));/*  this function controls the bot's guess random function is to simulate an IQ for the Bot*/
				}
	    		
				 initialize(); /* this function initialize the selected players,  allow user to press enter to spin wheel and accept vowel input  */
				 
				 if(Spin.getType().equals("BANKRUPT")) {
					 Player.getPlayerData().setRoundTotal(0); /** subtract all the money for the round **/
					 Player = ContestantList.SelectNextNode();/** go to the next player **/
				 }else if(Spin.getType().replaceAll("_", " ").equals("LOOSE A TURN")) {
					 Player = ContestantList.SelectNextNode();/**  go to the next player **/
				 }else{
				
					   
					 if(VowelBought) {
						 attempt = userInput;
					 }else {
					    if(!incorrectGuess) {
					    	
					    	if(!isBot(Player.getPlayerData().getName())) {/* let player enter letter but skip if its a Bot */
					    		System.out.print("\n\n Enter a Letter: ");
						    	if (Player.getPlayerData().getRoundTotal() > 0)System.out.print(" 'or solve the Puzzle': "); 
						    		attempt = input.nextLine().toUpperCase(); /** input starts here **/
					    	}else {
					    		if(isVowel(attempt) && Player.getPlayerData().getRoundTotal() >= 100) {/* set buy vowel to true if bot select a vowel and its round total is atleast $100*/
					    			VowelBought = true;
					    			System.out.print("\n BUY: ");
					    			Thread.sleep(1000);/* set delay time */ 
					    			System.out.print(attempt);
					    		}else {
					    			Thread.sleep(500);/* set delay time */ 
					    			System.out.print("\n: " + attempt);
					    		}
					    		tempBotAlphabet = tempBotAlphabet.substring(0,botGues)+ "" + tempBotAlphabet.substring(botGues+1);/* guessed letters are removed from the bot's temporary alphabet so that bot will not attempmt to use them again*/
					    	}
					    	
					    }else {
					    	attempt = userInput;
					    }
					 }
					    
					    
						if(attempt.length() > 1 ) {/***********************  SOLVE PUZZLE STARTS  *****************************************/
							if(Player.getPlayerData().getRoundTotal() > 0) {/* allow player to solve puzzle if he/she has money in the round */
								if(attempt.equals(selectedPuzzle)){   
									puzzleSolved = true;
								}else {
									Player = ContestantList.SelectNextNode();/** go to the next player **/
									System.err.print("\t\t\t Incorrect Guess");
									soundEffect("buzz", 700);/* buzzer sound effect */
								}
							}else {/** * display a error message if player don't have any money to solve the puzzle * **/
								System.err.print("\t\t\tYou Don't Have any Money");
								StopTheWheel = true;/* prevent wheel from spinning */
							}
						}/***********************  SOLVE PUZZLE ENDS  *****************************************/
						
						
						
						else if(attempt.length() != 0){/* *   check input letter   * */
							if((!VowelBought) && isVowel(attempt) ) {
									System.err.print("\t\t\t{YOU HAVE TO PURCHACE VOWELS}");
								StopTheWheel = true;
							}
							
							else {
								
								boolean foundInQueue = false;
								if(gussedQueue.search(attempt)) {/** pass the input through the (Queue)search function  to check if it match ant previous letter  **/
									foundInQueue = true;
									StopTheWheel = true;/* prevent wheel from spinning */
								}
								
							
								if(!foundInQueue) {/* enter this function if the letter hasn't been used */
									
									Guess GuessedLetter = new Guess();
									GuessedLetter.setGuessed(attempt);
									gussedQueue.EnQueue(GuessedLetter);/** add new letter to the Queue  **/
									
									int CorrectLetterGuessed = 0;/* * initialize variable to check the amount of letters found  * */
									char guess = attempt.charAt(0);/* * *   update char array input used to compare guessed letter with letter in the puzzle  * * */
									for(int i = 0; i < selectedPuzzle.length(); i++) {
										if(selectedPuzzle.charAt(i) == guess) {
											wordToSolve[i] = guess; /*  ADD THE CORRECT LETTERS TO THE CHARECTER ARRAY TO BE DISPLAYED*/
											soundEffect("ding", 800);/* Correct  Letter sound effect */
											CorrectLetterGuessed ++; /* * Increment the amount of letter Found by the amount found * */
											LeterRemainInPuzzle --; /* Decrement the amount of letter remaining by the amount found */
										}
									}if(CorrectLetterGuessed == 0) {
										soundEffect("buzz", 700);/* buzzer sound effect */
										Player = ContestantList.SelectNextNode();/** go to the next player **/
									}else{
									 soundEffect(String.valueOf(CorrectLetterGuessed), 600);/* play number sound effect (convert int to string)*/
									 soundEffect(Character.toString(guess).toLowerCase(), 0);/* play Letter sound effect */
									}
									String verb; if(CorrectLetterGuessed > 1) verb = " are "; else verb = " is ";
									printNewLine(50);
									System.out.print(" There"+  verb +  "(" + CorrectLetterGuessed + ")(" + attempt.toUpperCase().charAt(0) +") in the puzzle");	
									
									if(CorrectLetterGuessed != 0) {
										if(VowelBought) { /* check if Vowel bought */
											Player.getPlayerData().setRoundTotal(Player.getPlayerData().getRoundTotal() - (CorrectLetterGuessed*100)); /* subtract $100 for every vowel(letter)*/
											System.out.print("\t ~(Cost : $" + CorrectLetterGuessed*100 + ")~");/** multiply the amount of vowel (letters) by $100 **/
										}else {
											float Money = selectedValue*CorrectLetterGuessed;/** multiply the Value by the amount of correct letters **/	
											System.out.print("\t (Value : $" + Money + ")");							
											Player.getPlayerData().setRoundTotal(Money += Player.getPlayerData().getRoundTotal());/** add round total to grand total **/
											VowelBought = false;/* Reset Vowel bought */
										}
									}
									
									DisplayQueue(); /*  Display the letters in the  Queue   */
									puzzleToSolve();/* Display puzzle function */
									if(LeterRemainInPuzzle == 0) {
										puzzleSolved = true;
									}
						
								}	
							}
						}else {
							StopTheWheel = true;
						}
						
					if (puzzleSolved) {/**  add round total of the winner to their grand total **/
						clearTheRound();	
					}
				 }
			 }/* *********************** PUZZLE LOOP ENDS *********************** */
		
		}catch(NullPointerException e) {
			System.err.println("( NullPointerException ) List is Empty!!");
		}catch(IllegalArgumentException e) {
			System.err.println("( IllegalArgumentException ) Bound of random number must be positive");
		}catch(InterruptedException e) {
			System.err.println("( InterruptedException ) caught!!");
		}
	}

/*************************************************  ROUND ENDS HERE  ****************************************************************/	

	/**----------------- Accessors used in main -----------------*/
	public int getRoundNumber() {
		return roundNumber;
	}


	public void setRoundNumber(int roundNumber) {
		this.roundNumber = roundNumber;
	}

	
	
	public LinkedList getWheel() {
		return Wheel;
	}



	public LinkedList getPuzzleList() {
		return PuzzleList;
	}
	/**----------------- Accessors used in main -----------------*/
	
	
	
/************************************  GAME FUNCTIONS BELLOW  ************************************/	
	




	public void LoadContestant() throws InterruptedException {
		welcome();/* function displays the welcome menu */
		option = input.nextLine().toUpperCase();
		if(option.equals("C")) {
			BotMenu(); 
		}int playa = (3 - bots);
		for(int i = 0; i < totalPlayers; i++) {/**  add players  **/
			if(option.equals("N") | option.equals("C")){
				if(playa != 0) {
					printNewLine(50);
					System.out.print(" Enter Player " + (i+1) + " Name: ");
					Name = new Scanner(System.in).nextLine();
					playa --; 
				}else {
					Name = "Bot"+i;
				}
				Contestant PlayerData = new Contestant();
				PlayerData.setName(Name);
				PlayerData.setPlayerNumber(i+1);
				ContestantList.circulyList(null, PlayerData, null);
			}else
				ContestantList.circulyList(null, (new Contestant("Player " + (i+1), i+1, 0, 0)), null ); /**   create 3 new player with default names **/
		}printNewLine(50);
	}
	
	
	@SuppressWarnings("resource")
	public void LoadWheel() throws FileNotFoundException {
		Scanner ReadCards = new Scanner(new File("Cards.txt"));
		while(ReadCards.hasNext()) {
			cardTypeFromFile = ReadCards.next();
			cardValuesFromFile = ReadCards.nextFloat();
			Card cardData = new Card(cardTypeFromFile,cardValuesFromFile);
			Wheel.circulyList(cardData, null, null);
		}	
	}
	
	
	@SuppressWarnings("resource")
	public void LoadPuzzle() throws FileNotFoundException{
		Scanner ReadPuzzle = new Scanner(new File("Puzzle.txt"));
		while(ReadPuzzle.hasNext()) {
			categoryFromFile = ReadPuzzle.next();
			puzzleFromFile = ReadPuzzle.next();
			Puzzle puzzleData = new Puzzle(categoryFromFile,puzzleFromFile);
			PuzzleList.circulyList(null, null, puzzleData);
			NumberOfPuzzle ++;
		}
	}
	
	

	public void PuzzleSelectedAtRandom() throws InterruptedException {
		soundEffect("the category is", 2000);/* play "the category is" sound effects */
		RoundPuzzle = PuzzleList.selectRandomPuzzle(rand.nextInt(NumberOfPuzzle), NumberOfPuzzle);
		selectedCategory = RoundPuzzle.getPuzzleData().getCategory();/* get the puzzle category */
		selectedPuzzle = RoundPuzzle.getPuzzleData().getWord().replaceAll("_", " ").replaceAll(",", ", "); /** replace ( "_" ) with (" ")  **/ 
		
		LeterRemainInPuzzle = selectedPuzzle.replaceAll(" ", "").replaceAll(",", "").replaceAll("'", "").replaceAll("-", "").length();/** set the length of letter remaining in puzzle to the length of the puzzle and subtract the amount of space **/  
		wordToSolve = new char[selectedPuzzle.length()]; /** get the puzzle and store it as a char array **/
		for(int i = 0; i < wordToSolve.length; i++)
			wordToSolve[i] = ' ';/* Set all the character in the array to blank space */
		
		if(selectedCategory.equals("People")){
			soundEffect("people", 0);/* play "People" effects */
		}else if(selectedCategory.equals("Place")){
			soundEffect("place", 0);/* play "Place" sound effects */
		}else if(selectedCategory.equals("Animal")){
			soundEffect("animal", 0);/* play "Animal" sound effects */
		}else {
			soundEffect("thing", 0);/* play "thing" sound effects */
		}
		
	}
	
	
	public void puzzleToSolve() {/* Display puzzle function */
		System.out.print("\n[Round " + roundNumber + "]-> Category: " + selectedCategory +"\n{ " );
		for(int i = 0; i < wordToSolve.length; i ++) {
			if(selectedPuzzle.charAt(i) == ','){
				System.out.print(",");
			}else if(selectedPuzzle.charAt(i) == '\''){
				System.out.print("'");
			}else if(selectedPuzzle.charAt(i) == '-'){
				System.out.print("-");
			}else if(selectedPuzzle.charAt(i) == ' '){
				System.out.print("  ");
			}else {
				if(wordToSolve[i] == ' ') 
					System.out.print("[]");
				else
					System.out.print(" "+ wordToSolve[i]);
			}
		}System.out.print(" } \t ");
	}
	
	
	
	public void initialize() throws InterruptedException {
		Player.getPlayerData().display(); /** Display the Current Player **/
		userInput = ""; 
		VowelBought = false; 
		incorrectGuess = false;
		
		if(!StopTheWheel) {/** sort out error that cause wheel to spin after attempting to solve puzzle without any money to solve puzzle **/
			 
			if(!isBot(Player.getPlayerData().getName())) {
				 System.out.print("\n \t\t\t> [PRESS (Enter) to spin Wheel] <");
				 if (Player.getPlayerData().getRoundTotal() >= 100) {/* allow player to purchase a vowel if the have a minimum of $100 as their round total */
					 System.out.print(" OR > [TYPE 'BUY' to buy a VOWEL] < OR > [Solve the Puzzle] \n: "); 
					 userInput = new Scanner(System.in).nextLine().toUpperCase();/* accept word or phrase and convert it to upper case  */
				 }else
					 new java.util.Scanner(System.in).nextLine();/* PAUSE */ 
			 }
			if((userInput.equals("BUY"))){
				while(!isVowel(userInput)) {/* use a function to check if the input is a vowel */
					System.out.print("Enter a VOWEL: ");
					userInput = input.next().toUpperCase(); /** input starts here **/
				}VowelBought = true;
			}else
				if(userInput.length() > 1)  /**  check if more than one character has been entered  and it is not the word "BUY"  **/
					incorrectGuess = true;
				else {
					soundEffect("wheel", 5000);/* spin wheel sound effect */
					Spin = SPINWHEEL();/** get data returned by the spinWheel function **/
				}
			
		 }StopTheWheel = false;
		 
		 selectedValue = Spin.getValues();
		 if(!(StopTheWheel | VowelBought)) {
			 System.out.print("\n\t\t\t[Spot On Wheel: " + spotOnWheel + "] >> ");/** * ** display the current spot on wheel ** * **/
			 Spin.display();/** Display  data from current spin beside player data **/
		 }
	}
	
	
	private int spinWheel;
	public Card SPINWHEEL() throws NullPointerException, InterruptedException{/** spin wheel and return the data **/
		Node Spin = new Node();
		spinWheel = 50+rand.nextInt(50);
		smartSpin(Difficulty) ;
		/** System.out.println(" Random number: "+spinWheel); **/
		for(int i = 1; i <= spinWheel; i ++) {/**  loop to the random number generated  **/
			 Spin = Wheel.SelectNextNode(); /**  select next node until loop ends  **/
		/*	 System.out.println(i + " " + Spin.getCardData().getType() + " " + Spin.getCardData().getValues()); print and track the wheel position */
		}
		int valu = (int) Spin.getCardData().getValues();
		soundEffect(String.valueOf(valu),0);/* play value on card  sound effects */
		spotOnWheel += spinWheel;
		spotOnWheel = currentSpotOnWheel(spotOnWheel);/* call the recursive function */
		return Spin.getCardData();
	}
	
	
	public int currentSpotOnWheel(int num) {/* use a recursive method to find the exact index on wheel from the random number generated */
		if(num > 0){
			if(num <= 25)
				return num;
			else
				return	currentSpotOnWheel(num - 25);
		}else {
			return	currentSpotOnWheel(num + 25);
		}
	}
	
	
	 public boolean isVowel(String in) {/**  check if the letter entered is a vowel  **/
		 String Vowels ="AEIOU";
		 for(int i = 0; i < Vowels.length(); i++) {
			 if(Vowels.charAt(i)==in.charAt(0)) {
				 return true;
			 }
		 }
		return false; 
	 }
	 
	
	public void DisplayQueue() {/*  Display the letters in the  Queue   */
		System.out.print("\n PREV... GUESS: "); gussedQueue.display("REGULAR");/* track guessed letters */
		System.out.print("\n USED VOWEL(S): "); gussedQueue.display("VOWELS");/* track guessed Vowel(s) */
	}
	
	
	public void clearTheRound() throws InterruptedException {
		gussedQueue.destroyQueue();/*  destroy guessed linked list  */
		Player.getPlayerData().setGrandTotal(Player.getPlayerData().getGrandTotal() + Player.getPlayerData().getRoundTotal());/*add the round total of the player that win the round, to his/her grand total*/
		ContestantList.resetRoundTotals(3);/* reset round total accept the number of player as a parameter */
		Player.getPlayerData().setWin(Player.getPlayerData().getWin()+1);
		System.out.println("\n puzzle solved { " + selectedPuzzle + " } \n"); 
		NumberOfPuzzle--;
		soundEffect("round ended", 3000);/* win round/ round ended sound effect   */
		printNewLine(50);
	}
	
	
	public void gameData() throws InterruptedException{/** display the players and check who has the highest grand total, to decide the winner   **/
		soundEffect("applause",0);/* play applause sound effect */
		try {
			Node Player = new Node();/* create a new node to store and compare player data in order to identify the winner */
			int lost;
			float Highest = 0;/* set the the highest to zero, to compare with players round total in order to identify the player with the highest round total; hence the winner   */
			String Winner = "";/* create a variable to store the name of the winner*/
			System.out.print(" ");printUnserscore(105);
			System.out.print("\n | "); printSpace(30); System.out.print("|"); printSpace(25); System.out.print("|"); printSpace(26); System.out.print("|" );printSpace(18);System.out.print("|");
			System.out.print("\n | NAMES \t\t\t | (Number of Round(s) Won | (Number of Round(s) Lost | Grand Total      |");
			System.out.print("\n |");printUnserscore(31);System.out.print("|");printUnserscore(25);System.out.print("|");printUnserscore(26);System.out.print("|");printUnserscore(18);System.out.print("|\n");
			
			for(int i = 0; i < getRoundNumber(); i++) {
				Player = ContestantList.SelectNextNode();
				if(Player.getPlayerData().getGrandTotal() > Highest) {/*check if the selected player's grand total is greater that the previous set highest*/
					Highest = Player.getPlayerData().getGrandTotal();/*set the highest to the current grand total if it is greater than the previous set highest*/
					Winner = Player.getPlayerData().getName(); /* set the winner to the respective player*/
				}
				lost = getRoundNumber()-Player.getPlayerData().wins;/*set the number of lost to the (number of wins minus the total round)*/
				System.out.print(" | " + Player.getPlayerData().getName());
				printSpace(28-Player.getPlayerData().getName().length());
				System.out.print("  |");
				printSpace(11); System.out.print(Player.getPlayerData().wins); printSpace(11);
				System.out.print("  |"); printSpace(11); System.out.print(lost); printSpace(12);
				String gT = String.valueOf(Player.getPlayerData().getGrandTotal());
				System.out.print("  | $" + gT);printSpace(16-gT.length());System.out.print("|\n");
			}
			System.out.print(" |");printUnserscore(31);System.out.print("|");printUnserscore(25);System.out.print("|");printUnserscore(26);System.out.print("|");printUnserscore(18);System.out.print("|\n");
			System.out.print(" |");printSpace(31);     System.out.print("|");printSpace(71);     System.out.print("|\n");
			System.out.print(" | WINNER      ----->            | ");System.out.print(Winner );printSpace(70-Player.getPlayerData().getName().length());System.out.print("|\n");
			System.out.print(" |");printUnserscore(31);System.out.print("|");printUnserscore(71);System.out.print("|");
			setRoundNumber(0);/** reset round number **/
			ContestantList.destroy();/* delete the player nodes when the games ends*/
		}catch(NullPointerException e) {
			System.err.println("( NullPointerException ) List is Empty!!");
		}
	}
	
	
	boolean newgame = true;
	public void welcome() throws InterruptedException {
		printNewLine(50);
    	System.out.print(" \u25A0-******************************************************************************-\u25A0\n");
		System.out.print(     " |            WELCOME TO GAME SHOW NETWORK (GSN) WHEEL OF FORTUTE                 |\n");
		System.out.print(" \u25A0-*******************************---------------********************************-\u25A0\n");
		System.out.print(" \u25A0--------------------------------[  MAIN MENU  ]---------------------------------\u25A0\n"); 
		System.out.print(     " |                                                                                |\n");
		System.out.print(     " | (PRESS 'ENTER') TO: Use Default Player Names ->{Player 1, Player 2, Player 3}  |\n");    
		System.out.print(     " | (PRESS 'N' THEN 'ENTER') FOR: New Player Names ->{Input your own player names} |\n");
		System.out.print(     " | (PRESS 'C' THEN 'ENTER') To play against(Bot/Computer)                         |\n");
		System.out.print(" \u25A0--------------------------------------------------------------------------------\u25A0\n");
		if(newgame) {
			soundEffect("welcome", 4500);/* play welcome sound effects */
			newgame = false;
		}
		System.out.print("\n OPTION: ");
	}
	
	public void ExitMenu(){
		System.out.println(    "\n | ");
		System.out.println(" \u25A0-------------\u25A0");
		System.out.println(      " | 1: NEW GAME |");
		System.out.println(      " | 2: EXIT     |");
		System.out.println(      " |_____________|");
		System.out.print  (      "\n CHOOSE: ");
	}
	
	public void BotMenu(){
		printNewLine(50);
		System.out.println(" \u25A0-----------------------------------------------\u25A0");
		System.out.println(     " | A (MAXIMUM OF 2 BOTS)CAN BE ADDED TO THE GAME |");
		System.out.println(" \u25A0-----------------------------------------------\u25A0");
		System.out.println(     " | 1: TO ADD/PLAY AGAINST ONE BOT                |");
		System.out.println(     " | 2: TO ADD/PLAY AGAINST TWO BOTS               |");
		System.out.println(     " | How many Bots do you wish to add/play against?|");
		System.out.println(     " |_______________________________________________|");
		System.out.print  (     " CHOOSE: ");
		try {
			while(bots < 1 | bots > 2)
				bots =  Integer.valueOf(input.nextLine());
		}catch(NumberFormatException e) {
			BotMenu();
		}
		BotSubMenu();
	}
	
	public void BotSubMenu(){
		int	LEVEL = 0;
		printNewLine(50);
		System.out.println(" \u25A0---------------------\u25A0");
		System.out.println(     " | LEVEL OF DIFFICULTY |");
		System.out.println(" \u25A0---------------------\u25A0");
		System.out.println(     " | 1: BEGINNER         |");
		System.out.println(     " | 2: MODERATE         |");
		System.out.println(     " | 3: EXPERT           |");
		System.out.println(     " | 4: LEGENDARY        |");
		System.out.println(     " |_____________________|");
		System.out.print  (     " CHOOSE: "); 
		try {
			while(LEVEL < 1 | LEVEL > 4) 
				LEVEL =  Integer.valueOf(input.nextLine());
		}catch(NumberFormatException e) {
			BotSubMenu();
		}
		switch (LEVEL){
		case 1: Difficulty = 2;
				IQScale = 2;
			break;
		case 2: Difficulty = 3;
				IQScale = 3;
			break;
		case 3: Difficulty = 4;
				IQScale = 4;
			break;
		case 4: Difficulty = 5;
				IQScale = 5;
				break; 
		}
		printNewLine(11);
	}
	
	
	public void credits() throws InterruptedException{ 
		printNewLine(50);
		System.out.println("\t\u25A0-------------------------------------------\u25A0");
		System.out.println(     "\t|               DESIGNED BY:                |");
		System.out.println("\t\u25A0-------------------------------------------\u25A0");
		System.out.println(     "\t| CRAIG REID:              1806394          |");
		System.out.println(     "\t| SACKASHA GRIFFITHS:      1800733          |");
		System.out.println(     "\t| KENNEAL STEPHENS         1602964          |");
		System.out.println(     "\t|                                           |");
		System.out.println(     "\t|___________________________________________|");
		System.out.println(     "\t| Copyright © 2020. All rights reserved ™ ® |");
		System.out.println("\t\u25A0-------------------------------------------\u25A0");	
		soundEffect("credits", 40000);/* play welcome sound effects */
	}
	
	
	/************************************************  BOT FUNCTIONALITY ************************************************/
	protected int Difficulty = 0;
	protected int IQScale = 0;
	protected int BotGuessBuffer = 0;
	protected int botGues;
	public void AI_BotGuess(int IQ) {/* this function let the bot takes calculated guess base on the generated IQ  (IQ Represents the range of letter to choose from(1-4) in which is randomly generate upon function call) */
		boolean found = false;
		
		while (true){/* let the bot select a different letter if its already in the queue */
			botGues = rand.nextInt(tempBotAlphabet.length());
			attempt = String.valueOf(tempBotAlphabet.charAt(botGues)); /* let bot(s) select letter at random from the char array for its guess */
			if(isVowel(attempt) && (Player.getPlayerData().getRoundTotal() < 100)) {
				if( tempBotAlphabet.length() < 2) {
					tempBotAlphabet = botAlphabet;
					AI_BotGuess(IQ);
				}	
			}else {
				if(!gussedQueue.search(attempt))
					break;
				else
					tempBotAlphabet = tempBotAlphabet.substring(0,botGues)+ "" + tempBotAlphabet.substring(botGues+1);/* guessed letters are removed from the bot's temporary alphabet so that bot will not attempmt to use them again*/
			}
		}
		
		for(int i = 0; i < selectedPuzzle.length(); i++) {/* if the bot's first attempt is in the puzzle; it uses that letter, if not; it takes its second/final attempt */
			if(selectedPuzzle.charAt(i) == attempt.charAt(0)) 
				found = true; 
		}
		
		BotGuessBuffer ++;/* increments bot's BotGuessBuffer */
		if(BotGuessBuffer <= IQ) {/* executed if a bot had dot use all its attempt*/ 
			if(!found) {
				tempBotAlphabet = tempBotAlphabet.substring(0,botGues)+ "" + tempBotAlphabet.substring(botGues+1);/* guessed letters are removed from the bot's temporary alphabet so that bot will not attempmt to use them again*/
				AI_BotGuess(IQ-1);
			}
		}
		if(isVowel(attempt)){
			StopTheWheel = true;
		}
	}
	/************************************************  BOT FUNCTIONALITY ************************************************/
	
	
	
	public boolean isBot(String player) {/* check if player is a bot*/
		for(int i = 0; i < totalPlayers; i++) {
			if(player.equals("Bot"+i))
				return true;
		}
	return false;
	}
	
	public void smartSpin(int technique) {/*utilized  buy legendary and expert bot     */
		if(isBot(Player.getPlayerData().getName())){
			if(technique == 5) {
				if (currentSpotOnWheel(spinWheel+spotOnWheel) == 1) 
					spinWheel += 1;
				else 
					if (currentSpotOnWheel(spinWheel+spotOnWheel)  == 16) 
					spinWheel -= 1;	
				else 
					if (currentSpotOnWheel(spinWheel+spotOnWheel)  == 20) 
					spinWheel -= 1;	
			}else
			if(technique == 4) {
				if (currentSpotOnWheel(spinWheel+spotOnWheel)  == 1) 
					spinWheel += 1;
				else 
					if (currentSpotOnWheel(spinWheel+spotOnWheel)  == 16) 
					spinWheel -= 1;
			}
		}
	}
	
	
	 
	 public void soundEffect(String choice, int time) throws InterruptedException {
		 effects.setSound(choice);/* set sound effect by number in soundEffects class */
		 effects.PlaySound(effects.getSound());/* use the  getSound method from soundEffects class and pass it through the play sound method  effects */
		 Thread.sleep(time);/* set delay time */ 
	 }
	 
	 public void printNewLine(int amount) {
		 for (int i = 0; i < amount; i++) {
			 System.out.print("\n");
		 }
	 }
	 public void printSpace(int amount) {
		 for (int i = 0; i < amount; i++) {
			 System.out.print(" ");
		 }
	 }
	 public void printUnserscore(int amount) {
		 for (int i = 0; i < amount; i++) {
			 System.out.print("_");
		 }
	 }
	
}